<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"  
	 xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/cache  
    					http://www.springframework.org/schema/cache/spring-cache-3.1.xsd"
                        profile="base">
	<!-- 自动扫描 -->
	<context:component-scan base-package="org.movie.dao,org.movie.service,org.movie.cache" /> 
	
	<!-- 数据源使用引入的文件 -->
	<!-- <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:db.properties" />
	</bean>
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
	</bean> -->
	
	<!--test 数据源  -->
	<import resource="spring-core-test.xml"/>
	<!--dev 数据源  -->
	<import resource="spring-core-dev.xml"/>
	
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:org/movie/mapper/*.xml"></property>
		<!-- 添加映射配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />  
	</bean>
	<!--注入sqlsessionTemplate -->
	<!-- 数据访问模板类 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
<!-- 	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.code.server.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean> -->

	<!-- AOP相关 -->
	<!--启动aop的自动代理  -->
	<aop:aspectj-autoproxy />
	
	<!-- (事务管理器)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--事务注解生效？  -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!--AOP 日志打印  -->
	<bean id="logAspect" class="org.movie.aspect.LogAspect">
	</bean>
	
	
	<!-- xmemcached 配置-->
	<!-- <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:memcached.properties" />
	</bean> -->
	
	<bean name="memcachedClient"
                class="net.rubyeye.xmemcached.utils.XMemcachedClientFactoryBean" destroy-method="shutdown">
                <property name="servers">
                    <!--  <value>192.168.177.211:11211</value>  -->
                     <value>192.168.101.178:11211</value>  
                </property>
                <!-- 权重 -->
                 <property name="weights">
                        <list>
                                <value>1</value>
                        </list>
                </property>
                 <!-- 分布策略 使用一致性hash -->
                <property name="sessionLocator">
                        <bean class="net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator"></bean>
                </property>
   </bean>
   
   <!-- redis相关 -->
   <!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->    
   <cache:annotation-driven cache-manager="cacheManager" />    
   
   
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">  
	    <property name="maxIdle" value="${redis.pool.maxIdle}" />  
	    <property name="maxTotal" value="${redis.pool.maxTotal}" />    
	    <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />   
	    <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />  
	    <!-- <property name="testOnReturn" value="${redis.testOnReturn}" />  --> 
	</bean> 	

	  <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"  
        p:host-name="${redis.host}" p:port="${redis.port}"    p:pool-config-ref="jedisPoolConfig"/>  
        
        
        
     <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"></property>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>
    
    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
    	<constructor-arg ref="redisTemplate"/>
    </bean>
    
    <bean id="cacheManager" class="org.springframework.cache.support.CompositeCacheManager">
	    <property name="cacheManagers">
	        <list>
	        	<ref bean="redisCacheManager"/>
	        </list>
	    </property>
    	<!-- 都找不到时，不返回null，而是返回NOP的Cache -->
    	<property name="fallbackToNoOpCache" value="true"/>
    </bean>
    
          
</beans>  
	